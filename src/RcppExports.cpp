// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// QRV
double QRV(const arma::colvec& RR, const arma::mat& V, const arma::mat& W, const arma::mat& pmk, const arma::rowvec& Pk, const double& tauR, const double& tauV, const IntegerMatrix& EE);
RcppExport SEXP _LSEC_QRV(SEXP RRSEXP, SEXP VSEXP, SEXP WSEXP, SEXP pmkSEXP, SEXP PkSEXP, SEXP tauRSEXP, SEXP tauVSEXP, SEXP EESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pmk(pmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauR(tauRSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauV(tauVSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    rcpp_result_gen = Rcpp::wrap(QRV(RR, V, W, pmk, Pk, tauR, tauV, EE));
    return rcpp_result_gen;
END_RCPP
}
// QUV
double QUV(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::mat& pmk, const arma::rowvec& Pk, const arma::mat& Pmki1, const arma::mat& Pmki2, const double& tauS, const double& tauR, const double& tauU, const double& tauV, const IntegerMatrix& EE, const bool& subsamp, const IntegerMatrix& IVApprox);
RcppExport SEXP _LSEC_QUV(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP pmkSEXP, SEXP PkSEXP, SEXP Pmki1SEXP, SEXP Pmki2SEXP, SEXP tauSSEXP, SEXP tauRSEXP, SEXP tauUSEXP, SEXP tauVSEXP, SEXP EESEXP, SEXP subsampSEXP, SEXP IVApproxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pmk(pmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki1(Pmki1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki2(Pmki2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tauS(tauSSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauR(tauRSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauU(tauUSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauV(tauVSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const bool& >::type subsamp(subsampSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type IVApprox(IVApproxSEXP);
    rcpp_result_gen = Rcpp::wrap(QUV(SS, RR, U, V, W, pmk, Pk, Pmki1, Pmki2, tauS, tauR, tauU, tauV, EE, subsamp, IVApprox));
    return rcpp_result_gen;
END_RCPP
}
// QW
double QW(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::mat& pmk, const arma::rowvec& Pk, const IntegerMatrix& EE, const bool& subsamp, const IntegerMatrix& IVApprox);
RcppExport SEXP _LSEC_QW(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP pmkSEXP, SEXP PkSEXP, SEXP EESEXP, SEXP subsampSEXP, SEXP IVApproxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pmk(pmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const bool& >::type subsamp(subsampSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type IVApprox(IVApproxSEXP);
    rcpp_result_gen = Rcpp::wrap(QW(SS, RR, U, V, W, pmk, Pk, EE, subsamp, IVApprox));
    return rcpp_result_gen;
END_RCPP
}
// ahnGetDissimMat
arma::mat ahnGetDissimMat(const arma::mat& simMatij, const IntegerMatrix& EL);
RcppExport SEXP _LSEC_ahnGetDissimMat(SEXP simMatijSEXP, SEXP ELSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type simMatij(simMatijSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EL(ELSEXP);
    rcpp_result_gen = Rcpp::wrap(ahnGetDissimMat(simMatij, EL));
    return rcpp_result_gen;
END_RCPP
}
// computePmk
arma::mat computePmk(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::rowvec& alph, const IntegerMatrix& EE);
RcppExport SEXP _LSEC_computePmk(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP alphSEXP, SEXP EESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    rcpp_result_gen = Rcpp::wrap(computePmk(SS, RR, U, V, W, alph, EE));
    return rcpp_result_gen;
END_RCPP
}
// dQUV
arma::mat dQUV(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::mat& pmk, const arma::rowvec& Pk, const arma::mat& Pmki1, const arma::mat& Pmki2, const double& tauS, const double& tauR, const double& tauU, const double& tauV, const IntegerMatrix& EE, const bool& subsamp, const IntegerMatrix& IVApprox);
RcppExport SEXP _LSEC_dQUV(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP pmkSEXP, SEXP PkSEXP, SEXP Pmki1SEXP, SEXP Pmki2SEXP, SEXP tauSSEXP, SEXP tauRSEXP, SEXP tauUSEXP, SEXP tauVSEXP, SEXP EESEXP, SEXP subsampSEXP, SEXP IVApproxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pmk(pmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki1(Pmki1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki2(Pmki2SEXP);
    Rcpp::traits::input_parameter< const double& >::type tauS(tauSSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauR(tauRSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauU(tauUSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauV(tauVSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const bool& >::type subsamp(subsampSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type IVApprox(IVApproxSEXP);
    rcpp_result_gen = Rcpp::wrap(dQUV(SS, RR, U, V, W, pmk, Pk, Pmki1, Pmki2, tauS, tauR, tauU, tauV, EE, subsamp, IVApprox));
    return rcpp_result_gen;
END_RCPP
}
// dQW
arma::mat dQW(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::mat& pmk, const arma::rowvec& Pk, const IntegerMatrix& EE, const bool& subsamp, const IntegerMatrix& IVApprox);
RcppExport SEXP _LSEC_dQW(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP pmkSEXP, SEXP PkSEXP, SEXP EESEXP, SEXP subsampSEXP, SEXP IVApproxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pmk(pmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const bool& >::type subsamp(subsampSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type IVApprox(IVApproxSEXP);
    rcpp_result_gen = Rcpp::wrap(dQW(SS, RR, U, V, W, pmk, Pk, EE, subsamp, IVApprox));
    return rcpp_result_gen;
END_RCPP
}
// evalMargLogLik
double evalMargLogLik(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const arma::rowvec& alph, const IntegerMatrix& EE, const bool& subsamp, const IntegerVector& IVApprox);
RcppExport SEXP _LSEC_evalMargLogLik(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP alphSEXP, SEXP EESEXP, SEXP subsampSEXP, SEXP IVApproxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const bool& >::type subsamp(subsampSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type IVApprox(IVApproxSEXP);
    rcpp_result_gen = Rcpp::wrap(evalMargLogLik(SS, RR, U, V, W, alph, EE, subsamp, IVApprox));
    return rcpp_result_gen;
END_RCPP
}
// evalMargPost
double evalMargPost(const arma::colvec& SS, const arma::colvec& RR, const arma::mat& U, const arma::mat& V, const arma::mat& W, const double& tauS, const double& tauR, const double& tauU, const double& tauV, const arma::rowvec& alph, const IntegerMatrix& EE, const double& a_s, const double& b_s, const double& a_r, const double& b_r, const double& a_u, const double& a_v, const double& b_u, const double& b_v, const double& a_0, const bool& subsamp, const IntegerVector& IVApprox);
RcppExport SEXP _LSEC_evalMargPost(SEXP SSSEXP, SEXP RRSEXP, SEXP USEXP, SEXP VSEXP, SEXP WSEXP, SEXP tauSSEXP, SEXP tauRSEXP, SEXP tauUSEXP, SEXP tauVSEXP, SEXP alphSEXP, SEXP EESEXP, SEXP a_sSEXP, SEXP b_sSEXP, SEXP a_rSEXP, SEXP b_rSEXP, SEXP a_uSEXP, SEXP a_vSEXP, SEXP b_uSEXP, SEXP b_vSEXP, SEXP a_0SEXP, SEXP subsampSEXP, SEXP IVApproxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauS(tauSSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauR(tauRSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauU(tauUSEXP);
    Rcpp::traits::input_parameter< const double& >::type tauV(tauVSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const double& >::type a_s(a_sSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_s(b_sSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_r(a_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_r(b_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_u(a_uSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_v(a_vSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_u(b_uSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_v(b_vSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< const bool& >::type subsamp(subsampSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type IVApprox(IVApproxSEXP);
    rcpp_result_gen = Rcpp::wrap(evalMargPost(SS, RR, U, V, W, tauS, tauR, tauU, tauV, alph, EE, a_s, b_s, a_r, b_r, a_u, a_v, b_u, b_v, a_0, subsamp, IVApprox));
    return rcpp_result_gen;
END_RCPP
}
// getPmki
arma::mat getPmki(const arma::mat& Pmk, const IntegerVector& Mi1Index, const IntegerMatrix& Mi1);
RcppExport SEXP _LSEC_getPmki(SEXP PmkSEXP, SEXP Mi1IndexSEXP, SEXP Mi1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi1Index(Mi1IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi1(Mi1SEXP);
    rcpp_result_gen = Rcpp::wrap(getPmki(Pmk, Mi1Index, Mi1));
    return rcpp_result_gen;
END_RCPP
}
// indexEdges
Rcpp::List indexEdges(const IntegerMatrix& EE, const int& n);
RcppExport SEXP _LSEC_indexEdges(SEXP EESEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(indexEdges(EE, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LSEC_QRV", (DL_FUNC) &_LSEC_QRV, 8},
    {"_LSEC_QUV", (DL_FUNC) &_LSEC_QUV, 16},
    {"_LSEC_QW", (DL_FUNC) &_LSEC_QW, 10},
    {"_LSEC_ahnGetDissimMat", (DL_FUNC) &_LSEC_ahnGetDissimMat, 2},
    {"_LSEC_computePmk", (DL_FUNC) &_LSEC_computePmk, 7},
    {"_LSEC_dQUV", (DL_FUNC) &_LSEC_dQUV, 16},
    {"_LSEC_dQW", (DL_FUNC) &_LSEC_dQW, 10},
    {"_LSEC_evalMargLogLik", (DL_FUNC) &_LSEC_evalMargLogLik, 9},
    {"_LSEC_evalMargPost", (DL_FUNC) &_LSEC_evalMargPost, 22},
    {"_LSEC_getPmki", (DL_FUNC) &_LSEC_getPmki, 3},
    {"_LSEC_indexEdges", (DL_FUNC) &_LSEC_indexEdges, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_LSEC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
